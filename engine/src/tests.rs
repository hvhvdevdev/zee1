// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                                                                              │
// │ This Source Code Form is subject to the terms of the Mozilla Public          │
// │                                                                              │
// │ License, v. 2.0. If a copy of the MPL was not distributed with this          │
// │                                                                              │
// │ file, You can obtain one at https://mozilla.org/MPL/2.0/.                    │
// │                                                                              │
// └──────────────────────────────────────────────────────────────────────────────┘

//
// ────────────────────────────────────────────────────── I ──────────
//   :::::: I M P O R T S : :  :   :    :     :        :          :
// ────────────────────────────────────────────────────────────────
//

extern crate std;

use fluid::prelude::*;

//
// ──────────────────────────────────────────────────────────────── II ──────────
//   :::::: T E S T   C O N T E X T : :  :   :    :     :        :          :
// ──────────────────────────────────────────────────────────────────────────
//

struct CoreImplTest {}

//
// ─── CONTEXT SETUP ──────────────────────────────────────────────────────────────
//

impl Default for CoreImplTest {
    fn default() -> Self {
        Self {}
    }
}

//
// ─── CONTEXT TEARDOWN ───────────────────────────────────────────────────────────
//

impl Drop for CoreImplTest {
    fn drop(&mut self) {}
}

//
// ──────────────────────────────────────────────────────────────── III ──────────
//   :::::: T E S T   S E S S I O N : :  :   :    :     :        :          :
// ──────────────────────────────────────────────────────────────────────────
//

#[session]
impl CoreImplTest {
    //
    // ─── ADD TWO NUMBERS ─────────────────────────────────────────────
    //

    #[theory]
    #[case(1, 2, 3)]
    #[case(2, 3, 5)]
    #[case(-3, 2, -1)]
    #[case(-1,-9,-10)]
    fn one_plus_one(self, x: i32, y: i32, sum: i32) {
        (x + y).should().be_equal_to(sum);
    }
}

// ────────────────────────────────────────────────────────────────────────────────
